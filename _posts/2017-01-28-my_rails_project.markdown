---
layout: post
title:  "My Rails Project"
date:   2017-01-28 04:09:30 +0000
---

So first the first time since I've started this program, I havn't been stressed out about a section project. The rails project has thus far been the most fluid project I've worked on thus far. Not to say it was easy, it surely wasn't, but I wasn't stuck with as many roadblocks as I've had in the past. I genuinely had fun with this project, and although this project took the most time out of any I've done thus far, I enjoyed (almost) every second of it.

The biggest obstacle that came with my rails project was the initiation. I really had absolutely no idea about what to base my project on. I spent a lot of time looking up fun rails project, and was thoroughly disapointed. Every project listing I came accross was either already covered by the corriculum thus far, including to-do list, blog, and 'hello world' modifiers, or way beyond my current level of knowledge. Well either that or I don't have much confidence in my abilities as of late. I'm ashamed to say that it took me about three days figuring out what I wanted to do. Within those days I started quite a few projects and deemed it too mundane or just not fulfilling to pursue. Eventually, I just continued with the lessons telling myself I'll return to it later.

Eventually I did return to the project. I accidentally stumbled onto my project focus whilst browsing the web. I was looking up listings tutorials on some javascript stuff  and decided to bookmark it. After realizing my bookmarks are a clusterf@#k and needing a way to keep them better organized, I came up with the idea of basing my project around that. And thus, the powerpuff girls were born.

My rails project became the blunt end of my coding progression. Taking ideas from twitter, to-do-lists and reddit, I decided to make my project basically a way for me to store bookmarks(important links) relating to coding. Of course It can be used to store any link of course, but that's for another talk.The basic structure of my project is that a user logs in, post links deemeed important, leaves. A bit oversimplified but that's the general outline. A user can also add tags to a link they're posting, and view postins from other user as well as leave comments.

The really fun part of this project is coming up with all the ideas I wanted to implement. Once I started I had lots of ideas of what to put in my project, too many actually, and I had to scrap a lot of them because eventually things just got really messy. A bit of advice for anyone working on a moderately complex project; make a git branch for every section/feature you're working on. I learned this after watching a friend of mine, who is a java developer, do it for everything. Once you start jumping around from section to section, having different branches really helps keeps things clean and you can always discard a branch if you're scraping that idea without doing much harm to your master branch. 

In time, i settled on my core ideas. Firstly, it's basically required that I provided authentication via alternate source. So of course  I had to set up authentication via the `omniauth`gem. I decided to go with facebook authentication because it's pretty straightforward and widely used. Additionally, I decided to let `devise` handle my user session and registrations. Although devise is known to be overkill sometimes, and some may find it too complex, I find that the online resources for it is tremendous and makes working with `devise` a breeze. A perk of working with devise was that it already has some initializer configuration for authentication via `omniauth` so it made that all the more easier.

Another really fun and straighforward section of my project was implementing a way for users to 'like' and 'dislike' links. An idea I stole from facebook, I found it appealing to be able to upvote or downvote each link. That's where the gem `acts_as_votable` came into play. A pretty straightforward gem, It allowed me to user it's helper on my link model, creating a way for each user to cast a unique 'vote' on each link. Thus, if a user were to upvate a link, and then downvote it, only the most recent vote would count.

By far the **most annoying** part of my project  was the styling. I'm not ashamed to admit that I am complete TRASH when it comes to the visual aspect of website. I know it, it's something I need to work on heavily. So after I finished with the core functionality of my project,  I tucked my tail in and headed straight towards `bootstrap` thinking it an easy way. I was wrong, I would've been better off just center alligning everything and adding a different coloration to each element. Once I started looking into bootstrap,  I immediately regreted my decision but I viewed it as a challenege to overcome. I spent hours on the bootstrap website, trying to figure out how to get  it working in my project. Another warning; bootstrap 4 is still in alpha stage and is considerably different from the previous bootstrap versions. I spent a lot of time on stack overflow debugging my bootstrap problems and just googling different ways to get everything looking pretty. Eventuall I reached a point where I was satisfied and decided to push my project into it's final stages.

Wow, just realised this was quite a lengthy post.... sorry.


